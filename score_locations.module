<?php

// This module scores the library hours node as it is entered.


function score_locations_node_view($node, $view_mode, $langcode)
{
	//kpr($node);
	//kpr($node->field_days_of_week);
	//foreach($node->field_days_of_week as $tt)
	//{
		//foreach($tt as $tt1)
		//{
			//kpr($tt1['taxonomy_term']->name);
			//$daysonform[] = $tt1['taxonomy_term']->name;
		//}

		//kpr($tt);
		//kpr($tt[0]['taxonomy_term']->name);
		//print_r($tt[0]['taxonomy_term']->name);
		//$tt->['und'][]['tid'];
		//kpr($tt->['tid']);
		//kpr($tt->['und'][]['taxonomy_term']->name);
		//kpr($node->field_days_of_week['und'][$tt]['taxonomy_term']->name);
		//kpr($tt['und'][]['taxonomy_term']->name);
		//$dayschosen[] = $tt['und']['taxonomy_term']->name;
		//kpr($dayschosen);
	//}
	// User entered start and end date
	//$start_date = $node->field_start_date['und'][0]['value'];
    //$end_date = $node->field_end_date['und'][0]['value'];

    // Get days in date range
    //$days_in_chosen_range = get_days($start_date, $end_date);
	//kpr($daysonform);
	//set_days_selected_in_all_range($node, $days_in_chosen_range,$daysonform);

}

function score_locations_form_library_hours_node_form_alter(&$form, &$form_state, $form_id)
{
	//dsm($form_id);
	//dsm($form);
	//die(print_r($form));
	//die(print_r($form_id));
	
	if(!user_access("administer content"))
	{
		$form['field_score']['#access'] = FALSE;
	}	
	//die(print_r($form['fgm_node_library_hours_form_group_time'][LANGUAGE_NONE]['fgm_node_library_hours_form_group_time_add_more']['#value']));
	//die(print_r($form['fgm_node_library_hours_form_group_time']['add-more']['#value']));
	
	// Change text of Button Add Another Item
	if($form_id == 'library_hours_node_form')
	{
		//$form['fgm_node_library_hours_form_group_time'][LANGUAGE_NONE]['fgm_node_library_hours_form_group_time_add_more']['#value'] = 'Add another time range';
		//$form['fgm_node_library_hours_form_group_time'][LANGUAGE_NONE]['fgm_node_library_hours_form_group_time_add_more']['#value'] = t('Add another time range');
		//$form['fgm_node_library_hours_form_group_time_add_more']LANGUAGE_NONE]['field-group-multiple-add-more-submit']['#value'] = t('Add another time range');
		$form['fgm_node_library_hours_form_group_time']['add-more']['#value'] = t('Add another time range');
			
	}
	//die(print_r($form));
		//if(isset($form[' fgm_node_library_hours_form_group_time']))
		//{
	//$form['fgm_node_library_hours_form_group_time_add_more']['field-group-multiple-add-more-submit']['#value'] = t('Add another time range');
		//}
	//}
}

function score_locations_node_presave($node)
{
	// Days of week taxonomy
	$savedaystax = array();
	$term_tree = taxonomy_get_tree(4);
	
	foreach($term_tree as $treenode)
	{
		$savedaystax[] = $treenode->name;
	}
	
	// User entered start and end date
	$start_date = $node->field_start_date['und'][0]['value'];
    $end_date = $node->field_end_date['und'][0]['value'];

    // Get days in date range
    $days_in_chosen_range = get_days($start_date, $end_date);
    
    //Get number of days affected
    $num_days_affected = get_num_days_affected($start_date, $end_date, $savedaystax);
	
	//For a specified range, set selected days in all that range
	//set_days_selected_in_all_range($node, $days_in_chosen_range);
	
	//if selected days not in range, unset all
	unset_days_not_in_range($node, $days_in_chosen_range);
	
	//If no days selected, select all days
	score_locations_no_days_selected($node , $days_in_chosen_range);

	//Calculate Score
	$node->field_score['und'][]['value'] = score_locations_calculate_score($node, $num_days_affected);
}

function get_num_days_affected($start_date, $end_date, $array_chosen_tax_days_of_week)
{
	$number_of_days = 0;
	$curr_date = strtotime($start_date);
	$end_epoch = strtotime($end_date);
	while(date('U',$curr_date) <= date('U',$end_epoch))
	{
		//Extract day from chosen date
		$dayofweek = date("l", $curr_date);
		// If chosen days in the taxonomy
		if(in_array($dayofweek, $array_chosen_tax_days_of_week))
		{
			// Count number of days
			$number_of_days++;
		}
		
		// Add one day to the date
		$curr_date = strtotime('+1 day', $curr_date);
	}
	return $number_of_days;
}

function score_locations_no_days_selected(&$node, $days_in_chosen_range)
{
	$terms = taxonomy_term_load_multiple(array(),array('vid' => 4));
	
	// If no days are chosen from the taxonomy, use the date range to automatically
	// assign days to the days of week field.
	
	if(!isset($node->field_days_of_week['und'][0]))
	{
		//die(print_r($node, TRUE));
		foreach($terms as $term_node)
		{
			foreach($days_in_chosen_range as $tod)
			{

				if($tod == $term_node->name)
				{
					
					$node->field_days_of_week['und'][] = array(
														'tid' => $term_node->tid,
														'taxonomy_term' => $term_node);
				}
			}
			
		}
	}
	
}

// For a specified range, set all days
// i.e from Sept 4 to Nov 30 if days Saturday and Sunday chosen
// Select all Saturdays and Sundays in that range.

function set_days_selected_in_all_range(&$node, $days_in_chosen_range,$daysonform)
{
	//kpr($daysonform);
	//kpr($days_in_chosen_range);
	//foreach($daysonform as $dayselect)
	//{
		//foreach($days_in_chosen_range as $tod)
		//{
			//if($dayselect == $tod)
			//{
				//$node->field_days_of_week['und'][] = array()
			//}
		//}
	//}
	


	//foreach($node->field_days_of_week as $tt)
	//{
		//foreach($tt as $tt1)
		//{
			//kpr($tt1['taxonomy_term']->name);
			//die(print_r($tt1['taxonomy_term']->name,TRUE));
			//$daysonform[] = $tt1['taxonomy_term']->name;
			//die(print_r($daysonform,TRUE));
		//}

		//kpr($tt);
		//kpr($tt[0]['taxonomy_term']->name);
		//print_r($tt[0]['taxonomy_term']->name);
		//$tt->['und'][]['tid'];
		//kpr($tt->['tid']);
		//kpr($tt->['und'][]['taxonomy_term']->name);
		//kpr($node->field_days_of_week['und'][$tt]['taxonomy_term']->name);
		//kpr($tt['und'][]['taxonomy_term']->name);
		//$dayschosen[] = $tt['und']['taxonomy_term']->name;
		//kpr($dayschosen);
	//}
	//die(print_r($daysonform,TRUE));
	// Get Selected days
	//foreach ($node->field_days_of_week['und'] as $key=>$value)
	//{
		//die(print_r($node->field_days_of_week['und'][]['taxonomy_term'], TRUE));
	//die(print_r($node->field_days_of_week['und'][]['tid'], TRUE));

	//}
	

	//die(print_r($days_in_chosen_range));
	//die(print_r($node->field_days_of_week['und'], TRUE));

	//foreach ($node->field_days_of_week['und'] as $key=>$value)
	//{	
		//die(print_r($node->$field_days_of_week['und'], TRUE));
	//}
}

// If days selected on form not within range , unset them
function unset_days_not_in_range(&$node,$days_in_chosen_range)
{
	//Grab tids of the days chosen on the form
	//die(print_r($days_in_chosen_range,TRUE));
	foreach($node->field_days_of_week['und'] as $key => $day_chosen_on_form)
	{
		//die(print_r(taxonomy_term_load($day_chosen_on_form['tid'], TRUE)));
		if(!in_array(taxonomy_term_load($day_chosen_on_form['tid'])->name, $days_in_chosen_range))
		{
			//die(print_r($node, TRUE));
			unset($node->field_days_of_week['und'][$key]);
			
		}
	}
}

function get_days($start_date, $end_date)
{
	$curr_date = strtotime($start_date);
	$end_epoch = strtotime($end_date);
	
	while(date('U',$curr_date) <= date('U',$end_epoch))
	{
		//Extract day from chosen date
		$dayofweek = date("l", $curr_date);
		// If chosen days in the taxonomy
		// Add days to array
		$days[] = $dayofweek;
		// Add one day to the date
		$curr_date = strtotime('+1 day', $curr_date);
	}
	return $days;
}

function score_locations_calculate_score($node , $days_affected)
{
	// Current Epoch
	$time_now_epoch = time();
	
	// Count Checked field locations
	$checked_field_locations = count($node->field_locations['und']);
	
	//$score_node = $time_now_epoch / ($checked_field_locations * $days_affected);
	
	// Newly agreed upon formula
	$score_node = $checked_field_locations * $days_affected;

	return $score_node;
}
